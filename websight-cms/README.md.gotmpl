# WebSight Charts
{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}{{ template "chart.appVersionBadge" . }}

{{ template "chart.description" . }}

[WebSight](https://websight.io/) is a Digitial Experience Platform driven by the enterprise-grade CMS.

## Prerequisites

- Kubernetes cluster with at least 4 GB memory and 1 CPU (8 GB/2 CPU if you want to run CMS with MongoDB).
- Ingress Controller installed on k8s cluster (you may use e.g. [Nginx ingress](https://kubernetes.github.io/ingress-nginx/deploy/)).
- Helm 3.8+
- [Kind](https://kind.sigs.k8s.io/docs/user/quick-start/) (optional - for local development)

## CMS

### Quick start

```bash
helm upgrade --install websight-cms websight-cms \
  --repo https://websight-io.github.io/charts \
  --set cms.ingress.enabled=true \
  --set cms.ingress.host=cms.127.0.0.1.nip.io \
  --namespace websight --create-namespace --wait
```

This command deploys WebSight CMS on Kubernetes cluster with the default configuration in the `websight` namespace and waits until the deployment is ready.

> WebSight instance will be available at:
> - CMS Panel: http://cms.127.0.0.1.nip.io

The default CMS admin credentials are `wsadmin/wsadmin`.

### Uninstalling the Chart
To uninstall/delete the deployment run:
```bash
helm uninstall websight-cms -n websight
```

The command removes all the Kubernetes components associated with the chart and deletes the release.

### Parameters
{{ template "chart.valuesTable" . }}

{{ template "chart.requirementsSection" . }}

### Configuration

#### Running CMS with MongoDB as NodeStore

> Note MongoDB support will be available since WebSight CMS version 1.23.0.

1. Install MongoDB, e.g. with one of the following options:
  - Bitnami Helm Chart
    <details><summary>show commands</summary>
    <p>

    ```bash
    helm install mongodb oci://registry-1.docker.io/bitnamicharts/mongodb --version 14.3.0 \
      --set auth.enabled=true \
      --set auth.rootUser="mongoadmin" \
      --set auth.rootPassword="mongoadmin" \
      -n mongo --create-namespace
    ```

    </p>
    </details>

  - `kubectl` and [MongoDB docker image](https://hub.docker.com/_/mongo)
    <details><summary>show commands</summary>
    <p>

    ```bash
    kubectl create namespace mongo
    kubectl -n mongo run mongodb --image=mongo:7 \
      --env MONGO_INITDB_ROOT_USERNAME=mongoadmin \
      --env MONGO_INITDB_ROOT_PASSWORD=mongoadmin
    kubectl -n mongo expose pod mongodb --port=27017 --name=mongodb
    ```
    </p>
    </details>

2. Install CMS with mode `mongo` from `websight-cms` directory:
   ```bash
   helm upgrade --install websight-cms . \
     --set cms.persistence.mode=mongo \
     --set cms.persistence.mongo.hosts='mongodb.mongo:27017' \
     --set cms.livenessProbe.initialDelaySeconds=60 \
     -n websight --create-namespace
   ```

**Example:**
See the [mongodb-store](websight-cms/examples/mongodb-store) example `values.yaml` file for more details on how to run CMS with MongoDB as NodeStore.

#### Running CMS with Ngninx proxy
To run CMS with Nginx proxy you need to enable it by setting `proxy.enabled` to `true`.

See the [luna-proxy](websight-cms/examples/luna-proxy) example `values.yaml` file for more details on how to configure Nginx to proxy a particular CMS site.

To run the example, clone this repository and follow the steps below:

1. Create `websight` namespace:
   ```bash
   kubectl create namespace websight
   ```
2. From `websight-cms` directory create Nginx proxy configuration as a ConfigMap
   ```bash
   kubectl -n websight create configmap luna-site-config --from-file=examples/luna-proxy/luna-site.conf.template
   ```
3. From `websight-cms` directory install CMS with Nginx proxy enabled:
   ```bash
   helm -n websight upgrade --install websight-cms . \
     -f examples/luna-proxy/values.yaml --wait
   ```
   CMS should start in 1-2 minutes.
   The information about available CMS Panel and Luna site should be printed.

**Example:**
See the [web-proxy](websight-cms/examples/web-proxy) example `values.yaml` file for more details on how to configure Nginx to proxy a particular CMS site.

#### Custom CMS admin username and password

> Important!!!
>
> Setting custom username and password for the CMS administrator is possible only during the first installation!

By default, the CMS deployment runs an admin panel instance with default `wsadmin/wsadmin` credentials. To set a custom username and password, use Secret named `<Release name>-your-name`
with `WS_ADMIN_USERNAME` and `WS_ADMIN_PASSWORD` values configured and configure `cms.envsFromSecret` and `cms.customAdminSecret` accordingly. Create secret in the same namespace where CMS is deployed.

Example:

```bash
kubectl create secret generic <Release name>-cms-admin -n websight --from-literal WS_ADMIN_USERNAME=myadmin --from-literal WS_ADMIN_PASSWORD=mys3cretPassw0rd
```

> values.yaml
```yaml
cms:
  envsFromSecret:
    - cms-admin                # add all `<Release name>-cms-admin` secrets as env variables (this is how CMS reads custom username)
  customAdminSecret: cms-admin # mount `<Release name>-cms-admin` secret for CMS pod and add value from `WS_ADMIN_PASSWORD` key as a secret file (this is how CMS reads custom password)
```

**Example:**
See the [custom-admin](websight-cms/examples/custom-admin) example `values.yaml` file for more details on how to set custom CMS admin username and password.

### Local development

To run WebSight CMS locally with Kind, clone the repository and follow the steps below:
1. Create a Kind cluster with Ingress Nginx controller:
   ```bash
   kind create cluster --config .github/cluster/kind-cluster.yaml      
   kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
   ```
   And wait until the Ingress controller is ready:
   ```bash
   kubectl -n ingress-nginx rollout status deployment ingress-nginx-controller
   ```
2. Install WebSight CMS with the default configuration from the `websight-cms` directory:
   ```bash
   helm upgrade --install websight-cms . \
     --set cms.ingress.enabled=true \
     --namespace websight --create-namespace --wait
   ```
